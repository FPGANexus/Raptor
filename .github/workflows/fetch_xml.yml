name: 'Fetch and Test XML changes'

on:
  #push:
  repository_dispatch:
    types: [digest_latest_Release]
  workflow_dispatch:
    inputs:
      Release_Tag:
        description: 'Tag of Release to be integrated'
        default: ""
        type: string
        required: true

jobs:
  XML_Digest_and_raptor_build: 
    runs-on: ubuntu-latest  # job is matrix based so cannot run this job on self-hosted as it requires more runner
    permissions:
      contents: read
      pull-requests: write
    outputs:
      output1: ${{ steps.branch_name.outputs.b_name }}
      rlease_no: ${{ steps.decision.outputs.releaseNO }}
      RUN_XML_TEST: ${{ steps.run_tests.outputs.run_xml_test }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        updates:
        - xml
        - ric
    env:
      MODE: ${{ matrix.updates }}
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: switch branch & decide tag or latest
      id: decision
      run: |
            gh_event=`echo ${{ github.event_name }}`
            if [ $gh_event == 'repository_dispatch' ]
            then
                branch_postfix=${{ github.event.client_payload.new_release }}
                echo "release_no=$branch_postfix" >> $GITHUB_ENV
                echo "releaseNO=$branch_postfix" >> "$GITHUB_OUTPUT"
            else
                branch_postfix=${{ inputs.Release_Tag }}
                echo "release_no=$branch_postfix" >> $GITHUB_ENV
                echo "releaseNO=$branch_postfix" >> "$GITHUB_OUTPUT"
            fi
            git branch -a 
            BRANCH='${{ matrix.updates }}_$branch_postfix'
            set +e
            git ls-remote --exit-code --heads origin $BRANCH >/dev/null 2>&1
            EXIT_CODE=$?
            if [[ $EXIT_CODE == '0' ]]; then
                echo "Git branch '$BRANCH' exists in the remote repository"
                main_last_commit=`git log -1 --pretty=format:"%H"`
                git checkout $BRANCH
                git pull origin $BRANCH
                git reset --hard $main_last_commit
            elif [[ $EXIT_CODE == '2' ]]; then
                echo "Git branch '$BRANCH' does not exist in the remote repository"
            fi
            mv .gitignore gitignore_backup

    - name: Download Latest Release
      if: ${{ github.event_name == 'repository_dispatch' }}
      uses: robinraju/release-downloader@v1.8
      with:
        repository: "RapidSilicon/SpicaProduct"
        latest: true
        tarBall: true
        zipBall: true
        token: "${{ secrets.OPENFPGA_CASTOR_XML_MERGE }}"

    - name: Download Release using tag
      id: tag_release
      if: ${{ github.event_name == 'workflow_dispatch' }}
      uses: robinraju/release-downloader@v1.8
      with:
        repository: "RapidSilicon/SpicaProduct"
        tag: ${{ inputs.Release_Tag }}
        tarBall: true
        zipBall: true
        token: "${{ secrets.OPENFPGA_CASTOR_XML_MERGE }}"

    - name:  Unzip and copy all the files
      run: |
          gh_event=`echo ${{ github.event_name }}`
          if [ $gh_event == 'repository_dispatch' ]
          then
              echo "payload: ${{ github.event.client_payload.new_release }}"
          else
              echo "Tag is: ${{steps.tag_release.outputs.tag_name}}"
              echo "input tag was: ${{ env.release_no }}"
              echo "Files are: ${{ fromJson(steps.tag_release.outputs.downloaded_files)[0] }}"
          fi
          for file in $(ls -1 $GITHUB_WORKSPACE/*.tar.gz)
          do
          echo $file
          tar -xvf $file
          done
          rm -rf *.tar.gz RapidSilicon-SpicaProduct*
          ls -l 

    - name: show status
      run: git status

    - name: set the extension
      id: branch_name
      run: |
        case "${{ matrix.updates }}" in
            "ric")
                echo "updates are from ${{ matrix.updates }}"
                echo "path_to_commit=etc/**/**/*.tcl etc/**/**/*/*.tcl etc/**/**/*/*.json" >> $GITHUB_ENV
                any_diff=`git status --porcelain 'etc/*.json' 'etc/*.tcl'`
                echo $any_diff
                any_diff=`echo $any_diff | awk '{print $2}'`
                echo "AND_DIFF='$any_diff'" >> $GITHUB_ENV
                ;;
            "xml")
                echo "updates are from ${{ matrix.updates }}"
                echo "b_name=${{ matrix.updates }}_${{ env.release_no }}" >> "$GITHUB_OUTPUT"
                echo "path_to_commit=etc/devices/**/*.xml etc/device.xml etc/devices/**/*.csv" >> $GITHUB_ENV
                any_diff=`git status --porcelain 'etc/*.csv' 'etc/*.xml'`
                echo $any_diff
                any_diff=`echo $any_diff | awk '{print $2}'`
                echo "AND_DIFF='$any_diff'" >> $GITHUB_ENV
                ;;
            *)
                echo "Invalid value: ${{ matrix.updates }}"
                ;;
        esac

    - name: Check changes are related
      id: is_change
      run: |
        any_diff=`echo ${{ env.AND_DIFF }}`
        echo $any_diff
        if [ ! -z $any_diff ]
        then
           echo "has_changed=true" >> $GITHUB_OUTPUT
        else
          echo "nothing changed in ${{ matrix.updates }} files"
        fi

    - name: Install dependencies
      if: contains(steps.is_change.outputs.has_changed, 'true')
      run: |
        bash .github/workflows/install_ubuntu_dependencies_build.sh
        sudo apt-get install -y xmlstarlet
#        bash .github/workflows/install_litex_ubuntu.sh

    - name: Setup Python Packages
      if: contains(steps.is_change.outputs.has_changed, 'true')  
      run: |
        pip3 install orderedmultidict
        pip3 install psutil

    - name: Use ccache
      if: contains(steps.is_change.outputs.has_changed, 'true')
      uses: hendrikmuhs/ccache-action@v1.2.3
      with:
        key: linux-${{ matrix.updates }}

    - name: Configure shell
      run: |
        echo 'CC=gcc-11' >> $GITHUB_ENV
        echo 'CXX=g++-11' >> $GITHUB_ENV
        echo 'PATH=/usr/lib/ccache:'"$PATH" >> $GITHUB_ENV
        echo 'PREFIX=/tmp/raptor_gui-install' >> $GITHUB_ENV
        echo "$PREFIX" >> $GITHUB_PATH
        echo "ADDITIONAL_CMAKE_OPTIONS='-DMY_CXX_WARNING_FLAGS="-W -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -Werror -UNDEBUG"'" >> $GITHUB_ENV
        echo 'RULE_MESSAGES=off' >> $GITHUB_ENV
        echo 'LC_ALL=en_US.utf-8' >> $GITHUB_ENV
        echo 'LANG=en_US.utf-8' >> $GITHUB_ENV

    - name: Show shell configuration
      if: contains(steps.is_change.outputs.has_changed, 'true')
      run: |
        env
        which cmake && cmake --version
        which make && make --version
        which swig && swig -version
        which python && python --version
        which ninja && ninja --version
        which tclsh && echo 'puts [info patchlevel];exit 0' | tclsh
        which $CC && $CC --version
        which $CXX && $CXX --version

    - name: Build Raptor
      if: contains(steps.is_change.outputs.has_changed, 'true')
      run: |
          make release CPU_CORES=2

    - name: Extract device name
      id: run_tests
      if:  ${{ matrix.updates == 'xml' &&  steps.is_change.outputs.has_changed == 'true'}}
      run: |
         echo "run_xml_test=true" >> "$GITHUB_OUTPUT" 
         changes_in=`grep -o 'etc/devices/[^[:space:]]*' MANIFEST.TXT | cut -d/ -f3 | sort | uniq`
         echo ""
         echo "Change folder are $changes_in"
         echo ""
         for c in $changes_in
         do

                xmlstarlet sel -t -m "//device[internal[@type='vpr_arch']/@file='devices/$c/gemini_vpr.xml']" -v "@name" -n etc/device.xml | while read -r d; do
                echo "mkdir -p $(pwd)/results/$d && cd $(pwd)/results/$d && $(pwd)/build/bin/raptor --batch --device $d --script $(pwd)/tests/Testcases/and2_pin_table_test/run_raptor.tcl" >> build/raptor_run
                done
         done

    - name: Tar the Artifacts
      if: ${{ matrix.updates == 'xml' &&  steps.is_change.outputs.has_changed == 'true'}}
      run: |
          tar -cvzf  build.tar.gz build Raptor_Tools yosys_verific_rs         

    - name: Add and Push files
      if: contains(steps.is_change.outputs.has_changed, 'true')
      uses: GuillaumeFalourd/git-commit-push@v1.3
      with:
        email: pu.engineerg@gmail.com
        name: NadeemYaseen
        commit_message: Added ${{ matrix.updates }} files from release ${{ env.release_no }}
        files: "${{ env.path_to_commit }}"
        target_branch: ${{ matrix.updates }}_${{ env.release_no }}
        force: true
        access_token: ${{ secrets.OPENFPGA_CASTOR_XML_MERGE }}

    - name: Upload Raptor Build
      if: ${{ matrix.updates == 'xml' &&  steps.is_change.outputs.has_changed == 'true'}}
      uses: actions/upload-artifact@v3
      with:
          name: Raptor_build
          path: build.tar.gz

    - name: Create Raptor Build failure Issue in Jira
      if: failure () && contains(steps.is_change.outputs.has_changed, 'true') 
      uses: tomhjp/gh-action-jira-create@v0.1.3
      with:
          project: EDA
          issuetype: "Bug"
          summary: "Raptor build fail while digesting release ${{ env.release_no }}."
          description: "In an attempt to merge the release ${{ env.release_no }} in Raptor, the Raptor compilation fail. The link to the failed job is ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          extraFields: '{"assignee": { "id": "6239bc27a95758006959b14d"}}'
      env:
            JIRA_BASE_URL: https://rapidsilicon.atlassian.net
            JIRA_USER_EMAIL: nadeem.yaseen@rapidsilicon.com
            JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    - name: create pull request for RIC
      if: ${{ matrix.updates == 'ric' &&  steps.is_change.outputs.has_changed == 'true'}}
      run: |
            gh pr create -B main \
            -H ${{ matrix.updates }}_${{ env.release_no }}  \
            -l "openfpga_castor_pd_XMLs"  \
            --title 'Pulling release ${{ env.alaindargelas }} into main.' \
            --body 'An automated PR to check in New RIC TCL files from Release. Click on the link to see tests/batch results ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
            -a NadeemYaseen #-r alaindargelas  
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  test_xmls:
    needs: XML_Digest_and_raptor_build
    if:  contains(needs.XML_Digest_and_raptor_build.outputs.RUN_XML_TEST, 'true')
    runs-on: digest_release 
    container:
      image: ubuntu:22.04
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Install pre-requisite
      run: |
            apt update && apt upgrade -y && apt install sudo git openssh-client software-properties-common wget dialog apt-utils -y 

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: switch to branch
      run: |
            git config --global --add safe.directory /__w/Raptor/Raptor
            git branch -a
            git pull
            BRANCH=${{ needs.XML_Digest_and_raptor_build.outputs.output1 }}
            set +e
            git ls-remote --exit-code --heads origin $BRANCH >/dev/null 2>&1
            EXIT_CODE=$?
            if [[ $EXIT_CODE == '0' ]]; then
                echo "Git branch '$BRANCH' exists in the remote repository"
                git checkout $BRANCH
            elif [[ $EXIT_CODE == '2' ]]; then
                echo "Git branch '$BRANCH' does not exist in the remote repository"
            fi
            git branch

    - name: Install dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        export DEBIAN_PRIORITY=critical
        echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
        TZ=UTC
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
        echo "keyboard-configuration keyboard-configuration/layout select USA" | debconf-set-selections \
        && echo "keyboard-configuration keyboard-configuration/variant select USA" | debconf-set-selections \
        && DEBIAN_FRONTEND=noninteractive apt-get install -y keyboard-configuration
        bash .github/workflows/install_ubuntu_dependencies_build.sh
        sudo apt-get install -y xmlstarlet
#        bash .github/workflows/install_litex_ubuntu.sh

    - name: Setup Python Packages
      run: |
        pip3 install orderedmultidict
        pip3 install psutil
        pip3 install ray

    - name: Download Raptor Build
      uses: actions/download-artifact@v3
      with:
          name: Raptor_build

    - name: Extract Raptor artifacts
      run: |
          pwd
          tar -xzf build.tar.gz
          ls -l && cd build && ls -l
          mkdir /home/runner
          ln -s /__w /home/runner/work
                  

    - name: Run the test
      run: |
          if [ -f ./build/raptor_run ]
          then
              cat ./build/raptor_run
              python3 .github/bin/execute_parallel.py --filename ./build/raptor_run
              if [ $? != 0 ]
              then
                exit 1;
              fi
          else
              echo "This test file raptor_run does not exist so skipping it"
          fi         

    - name: Set the pass result
      run: |
            echo "true" > decision.txt
            tar -cvzf decision.tar.gz decision.txt          

    - name: Set the failed result
      if: ${{ failure() }}
      run: |
            echo "false" > decision.txt
            tar -cvzf decision.tar.gz decision.txt

    - name: Archive Tests logs
      if: ${{ always() }}
      run: |
            tar -cvzf all_test.tar.gz results          
            
    - name: Upload test logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
          name: Test_Logs
          path: all_test.tar.gz

    - name: Upload decision
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
          name: decision
          path: decision.tar.gz 

  Create_PR_or_Jira:
    needs: [test_xmls,XML_Digest_and_raptor_build]
    if: ${{ always () }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: switch to branch
      if: contains(needs.XML_Digest_and_raptor_build.outputs.RUN_XML_TEST, 'true')
      run: |
            git branch -a 
            git pull
            BRANCH=${{needs.XML_Digest_and_raptor_build.outputs.output1}}
            set +e
            git ls-remote --exit-code --heads origin $BRANCH >/dev/null 2>&1
            EXIT_CODE=$?
            if [[ $EXIT_CODE == '0' ]]; then
                echo "Git branch '$BRANCH' exists in the remote repository"
                git checkout $BRANCH
            elif [[ $EXIT_CODE == '2' ]]; then
                echo "Git branch '$BRANCH' does not exist in the remote repository"
            fi
            git branch

    - name: Download Decision
      if:  contains(needs.XML_Digest_and_raptor_build.outputs.RUN_XML_TEST, 'true')
      uses: actions/download-artifact@v3
      with:
          name: decision
      
    - name: Get the result
      if:  contains(needs.XML_Digest_and_raptor_build.outputs.RUN_XML_TEST, 'true')
      id: test_decision
      run: |
            tar -xvzf decision.tar.gz
            cat decision.txt
            echo "TEST_RESULT=`cat decision.txt`" >> $GITHUB_OUTPUT
                  
    - name: echo decision
      run: |
            echo "Decision: ${{ steps.test_decision.outputs.TEST_RESULT }}"            
            
    - name: Create PR if test on all devices pass
      if: contains(steps.test_decision.outputs.TEST_RESULT, 'true') 
      run: |
            gh pr create -B main \
            -H ${{ needs.XML_Digest_and_raptor_build.outputs.output1 }}   \
            -l "openfpga_castor_pd_XMLs"  \
            --title 'Pulling release ${{ needs.XML_Digest_and_raptor_build.outputs.releaseNO }} into main.' \
            --body 'An automated PR to check in New XML files from Release. Click on the link to see tests/batch results ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
            -a NadeemYaseen #-r alaindargelas  
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
  
    - name: Create Jira on failing test
      if: contains(steps.test_decision.outputs.TEST_RESULT, 'false')  
      uses: tomhjp/gh-action-jira-create@v0.1.3
      with:
          project: EDA
          issuetype: "Bug"
          summary: "Smoke test fail on XML/CSV from release ${{ needs.XML_Digest_and_raptor_build.outputs.releaseNO }}."
          description: "In an attempt to merge the release ${{ github.event.client_payload.new_release }} in Raptor, the smoke test fails. The link to the failed job is ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          #extraFields: '{"assignee": { "id": "712020:63820c3b-2ac9-4f39-b263-9d19c1e5ebcd"}}'
          extraFields: '{"assignee": { "id": "6239bc27a95758006959b14d"}}'
      env:
            JIRA_BASE_URL: https://rapidsilicon.atlassian.net
            JIRA_USER_EMAIL: nadeem.yaseen@rapidsilicon.com
            JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}    


            
